self-classfied clusters algorithm

Class Cluster:
  members = [] locations
theta(p1,p2) returns the similarity between p1 and p2
alpha = boundary that decides if two locations are too far

clusters = [5 empty Cluster objects]

def clusters fill up (clusters):
  done = False
  while not done:
    while clusters are not all filled:
      l = pick one from location_history
      if clusters are all empty:
        insert l into clusters.next_empty_cluster
        continue
      else:
        compare l to every head h in non-empty clusters
        if every theta(l,h) > alpha:
          insert l into clusters.next_empty_cluster
        else:
          fail_to_distinguish += 1
          continue

      if location_history is all picked:
        cluster_not_fill_up = True
        break from while loop

    if cluster_not_fill_up:
      run learner() to train theta
      modify theta so that it TIGHTENS its judgmengt on ruling two locations as similar

    else if fail_to_distinguish is every small or == zero:
      run learner() to train theta
      modify theta so that it LOOSENS its judgment on ruling two locations as similar

    else:
      done = True

shuffle id_list and do this five times
for all the heads, select those with most visit frequency as head of cluster
